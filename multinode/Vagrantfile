
$fixsysconf = <<-SCRIPT
sed -i '/net.ipv6.conf.all.disable_ipv6/d' /etc/sysctl.conf
sed -i 's/^#net.ipv4.ip_forward/net.ipv4.ip_forward/' /etc/sysctl.conf
sed -i 's/^#net.ipv6.conf.all.forwarding/net.ipv6.conf.all.forwarding/' /etc/sysctl.conf
sed -i 's/^#net.ipv4.conf.all.log_martians/net.ipv4.conf.all.log_martians/' /etc/sysctl.conf
sysctl -p /etc/sysctl.conf
SCRIPT

$deleth0dhcpdefault = <<-SCRIPT
sed -i '/^[[:space:]]*dhcp4:[[:space:]]true/a \\     \\ dhcp4-overrides:' /etc/netplan/01-netcfg.yaml
sed -i '/^[[:space:]]*dhcp4-overrides:/a \\       \\ use-routes: false'  /etc/netplan/01-netcfg.yaml 
SCRIPT

$fixhosts = <<-SCRIPT
sed -i '/ubuntu2004/d' /etc/hosts
sed -i 's/^127.0.2.1/127.0.1.1/' /etc/hosts
SCRIPT

$routerasdefault = <<-SCRIPT
sed -i  '$ a \\     \\ gateway4: 192.168.254.1' /etc/netplan/50-vagrant.yaml
SCRIPT

$installmk8s = <<-SCRIPT
snap install microk8s --classic
usermod -a -G microk8s vagrant
chown -f -R vagrant ~/.kube
microk8s status --wait-ready
microk8s enable dns
microk8s enable rbac
SCRIPT


Vagrant.configure("2") do |config|

BRIDGE = "#{ENV['USER']}" + "-epic0"


  config.vm.define 'router' do |router|
    router.trigger.before :up do |uptrigger|
      uptrigger.info = "running before up"
      uptrigger.run = {inline: "/usr/local/bin/brmgr.sh up" }
    end
    router.trigger.after :destroy do |destroytrigger|
      destroytrigger.info = "running after destroy"
      destroytrigger.run = {inline: "/usr/local/bin/brmgr.sh destroy"}
    end
    router.vm.hostname = 'router'
    router.vm.box = "frrouter"
    router.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      auto_config: false
    router.vm.network :public_network,
      :dev => "brint0",
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      auto_config: false
    
    router.vm.provider :libvirt do |lv|
      lv.cpus = 2
      lv.memory = 2048
    end
    router.vm.provision "shell", inline: $fixsysconf
    router.vm.provision "shell", inline: $fixhosts
    router.vm.provision "shell", inline: $deleth0dhcpdefault
    router.vm.provision "shell", inline: "netplan apply"
  end
 
  config.vm.define 'epic1' do |epic1|
    epic1.vm.hostname = 'epic1'
    epic1.vm.box = "generic/ubuntu2004"
    epic1.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      ip: "192.168.254.11"

    epic1.vm.provider :libvirt do |lv|
      lv.cpus = 4
      lv.memory = 6148
    end
    epic1.vm.provision "shell", inline: $fixsysconf
    epic1.vm.provision "shell", inline: $fixhosts
    epic1.vm.provision "shell", inline: $deleth0dhcpdefault
    epic1.vm.provision "shell", inline: $routerasdefault
    epic1.vm.provision "shell", inline: "netplan apply"

    epic1.vm.provision "file", source: "../files/epic_hosts", destination: "epic_hosts"
    epic1.vm.provision "shell", inline: "cat epic_hosts >> /etc/hosts"

  end

  config.vm.define 'epic2' do |epic2|
    epic2.vm.hostname = 'epic2'
    epic2.vm.box = "generic/ubuntu2004"
    epic2.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      ip: "192.168.254.12"

    epic2.vm.provider :libvirt do |lv|
      lv.cpus = 4
      lv.memory = 6148
    end
    epic2.vm.provision "shell", inline: $fixsysconf
    epic2.vm.provision "shell", inline: $fixhosts
    epic2.vm.provision "shell", inline: $deleth0dhcpdefault
    epic2.vm.provision "shell", inline: $routerasdefault
    epic2.vm.provision "shell", inline: "netplan apply"

    epic2.vm.provision "file", source: "../files/epic_hosts", destination: "epic_hosts"
    epic2.vm.provision "shell", inline: "cat epic_hosts >> /etc/hosts"

  end

  config.vm.define 'epic3' do |epic3|
    epic3.vm.hostname = 'epic3'
    epic3.vm.box = "generic/ubuntu2004"
    epic3.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      ip: "192.168.254.13"

    epic3.vm.provider :libvirt do |lv|
      lv.cpus = 4
      lv.memory = 6148
    end
    epic3.vm.provision "shell", inline: $fixsysconf
    epic3.vm.provision "shell", inline: $fixhosts
    epic3.vm.provision "shell", inline: $deleth0dhcpdefault
    epic3.vm.provision "shell", inline: $routerasdefault
    epic3.vm.provision "shell", inline: "netplan apply"

    epic3.vm.provision "file", source: "../files/epic_hosts", destination: "epic_hosts"
    epic3.vm.provision "shell", inline: "cat epic_hosts >> /etc/hosts"

  end

  config.vm.define 'mk8s1' do |mk8s1|
    mk8s1.vm.hostname = 'mk8s1'
    mk8s1.vm.box = "generic/ubuntu2004"
    mk8s1.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      ip: "192.168.254.101"

    mk8s1.vm.provider :libvirt do |lv|
      lv.cpus = 2
      lv.memory = 4096
    end
    mk8s1.vm.provision "shell", inline: $fixsysconf
    mk8s1.vm.provision "shell", inline: $fixhosts
    mk8s1.vm.provision "shell", inline: $deleth0dhcpdefault
    mk8s1.vm.provision "shell", inline: $routerasdefault
    mk8s1.vm.provision "shell", inline: "netplan apply"

    mk8s1.vm.provision "file", source: "../files/mk8s_hosts", destination: "mk8s_hosts"
    mk8s1.vm.provision "shell", inline: "cat mk8s_hosts >> /etc/hosts"
   

    mk8s1.vm.provision "shell", inline: $installmk8s

    mk8s1.vm.provision "file", source: "../files/kubens", destination: "kubens"
    mk8s1.vm.provision "shell", inline: "mv kubens /usr/local/bin"

    mk8s1.vm.provision "file", source: "../files/bash_aliases", destination: ".bash_aliases" 
    
    
  end

  config.vm.define 'mk8s2' do |mk8s2|
    mk8s2.vm.hostname = 'mk8s2'
    mk8s2.vm.box = "generic/ubuntu2004"
    mk8s2.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      ip: "192.168.254.102"

    mk8s2.vm.provider :libvirt do |lv|
      lv.cpus = 2
      lv.memory = 4096
    end
    mk8s2.vm.provision "shell", inline: $fixsysconf
    mk8s2.vm.provision "shell", inline: $fixhosts
    mk8s2.vm.provision "shell", inline: $deleth0dhcpdefault
    mk8s2.vm.provision "shell", inline: $routerasdefault
    mk8s2.vm.provision "shell", inline: "netplan apply"

    mk8s2.vm.provision "file", source: "../files/mk8s_hosts", destination: "mk8s_hosts"
    mk8s2.vm.provision "shell", inline: "cat mk8s_hosts >> /etc/hosts"
    
    mk8s2.vm.provision "shell", inline: $installmk8s

    mk8s2.vm.provision "file", source: "../files/kubens", destination: "kubens"
    mk8s2.vm.provision "shell", inline: "mv kubens /usr/local/bin"

    mk8s2.vm.provision "file", source: "../files/bash_aliases", destination: ".bash_aliases" 
  
  end
  
  config.vm.define 'mk8s3' do |mk8s3|
    mk8s3.vm.hostname = 'mk8s3'
    mk8s3.vm.box = "generic/ubuntu2004"
    mk8s3.vm.network :public_network, 
      :dev => BRIDGE,
      :mode => "bridge",
      :type => "bridge",
      :trust_guest_rx_filters => "true",
      ip: "192.168.254.103"

    mk8s3.vm.provider :libvirt do |lv|
      lv.cpus = 2
      lv.memory = 4096
    end
    mk8s3.vm.provision "shell", inline: $fixsysconf
    mk8s3.vm.provision "shell", inline: $fixhosts
    mk8s3.vm.provision "shell", inline: $deleth0dhcpdefault
    mk8s3.vm.provision "shell", inline: $routerasdefault
    mk8s3.vm.provision "shell", inline: "netplan apply"

    mk8s3.vm.provision "file", source: "../files/mk8s_hosts", destination: "mk8s_hosts"
    mk8s3.vm.provision "shell", inline: "cat mk8s_hosts >> /etc/hosts"


    mk8s3.vm.provision "shell", inline: $installmk8s

    mk8s3.vm.provision "file", source: "../files/kubens", destination: "kubens"
    mk8s3.vm.provision "shell", inline: "mv kubens /usr/local/bin"

    mk8s3.vm.provision "file", source: "../files/bash_aliases", destination: ".bash_aliases" 
    
  end

 
end
