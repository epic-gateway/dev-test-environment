
DELETEDHCP0DEFAULT = <<-SCRIPT
sed -i '/^[[:space:]]*dhcp4:[[:space:]]true/a \\     \\ dhcp4-overrides:' /etc/netplan/01-netcfg.yaml
sed -i '/^[[:space:]]*dhcp4-overrides:/a \\       \\ use-routes: false'  /etc/netplan/01-netcfg.yaml
SCRIPT

FIXHOSTS = <<-SCRIPT
sed -i '/ubuntu2004/d' /etc/hosts
sed -i 's/^127.0.2.1/127.0.1.1/' /etc/hosts
SCRIPT

ROUTERASDEFAULT = <<-SCRIPT
sed -i  '$ a \\     \\ gateway4: 192.168.254.1' /etc/netplan/50-vagrant.yaml
SCRIPT

# This var (which can be overridden with the EPIC_PRIVATE_REGISTRY env
# var) tells the snap package to configure containerd to use a private
# (i.e., insecure) registry. For example, if the value of
# EPIC_PRIVATE_REGISTRY is 192.168.1.80:5000 then containerd will be
# able to pull images from that registry using plain http. The default
# value is localhost:32000 which works with the registry that you get
# when you run "microk8s.enable registry".
EPIC_PRIVATE_REGISTRY = ENV.fetch('EPIC_PRIVATE_REGISTRY', 'localhost:32000')

EPICMGR = <<-SCRIPT
cat <<-ENVVARS >> /etc/environment
# set an env var so epicmgr will allow k8s to pull images from an insecure registry
EPIC_PRIVATE_REGISTRY="#{EPIC_PRIVATE_REGISTRY}"
ENVVARS
SCRIPT

BRIDGE = "#{ENV['USER']}" + "-epic0"
EXTBRIDGE = "brext0"
LVMPOOL = "default"

Vagrant.configure("2") do |config|

  config.vm.box = "generic/ubuntu2004"

  config.vm.define 'router' do |router|
    router.trigger.before :up do |uptrigger|
      uptrigger.info = "running before up"
      uptrigger.run = {inline: "../scripts/brmgr.sh up" }
    end
    router.trigger.after :destroy do |destroytrigger|
      destroytrigger.info = "running after destroy"
      destroytrigger.run = {inline: "../scripts/brmgr.sh destroy"}
    end
    router.vm.hostname = 'router'
    router.vm.box = "epic-gateway/frrouter"
    router.vm.box_version = "0.0.1"
    router.vm.network :public_network,
      dev: BRIDGE,
      mode: :bridge,
      type: :bridge,
      trust_guest_rx_filters: true,
      auto_config: false
    router.vm.network :public_network,
      dev: EXTBRIDGE,
      mode: :bridge,
      type: :bridge,
      trust_guest_rx_filters: true,
      auto_config: false

    router.vm.provider :libvirt do |lv|
      lv.cpus = 2
      lv.memory = 2048
      lv.storage_pool_name = LVMPOOL
    end
    router.vm.provision :shell, inline:-<<SCRIPT
sed -i 's/disable_ipv6=1/disable_ipv6=0/' /etc/modprobe.d/local.conf
sed -i 's/net.ipv6.conf.all.disable_ipv6 = 1/net.ipv6.conf.all.disable_ipv6 = 0/' /etc/sysctl.conf
sed -i 's/^#net.ipv4.ip_forward/net.ipv4.ip_forward/' /etc/sysctl.conf
sed -i 's/^#net.ipv6.conf.all.forwarding/net.ipv6.conf.all.forwarding/' /etc/sysctl.conf
sed -i 's/^#net.ipv4.conf.all.log_martians/net.ipv4.conf.all.log_martians/' /etc/sysctl.conf
sysctl -p /etc/sysctl.conf
SCRIPT
    router.vm.provision :shell, inline: FIXHOSTS
    router.vm.provision :shell, inline: DELETEDHCP0DEFAULT
    router.vm.provision :shell, inline: "netplan apply"
  end

  (1..3).each do |i|
    name = "epic#{i}"
    address = "192.168.254.1#{i}"
    config.vm.define name do |vm|
      vm.vm.hostname = name
      vm.vm.network :public_network,
                       dev: BRIDGE,
                       mode: :bridge,
                       type: :bridge,
                       trust_guest_rx_filters: true,
                       ip: address
      config.vm.synced_folder './', '/vagrant', type: 'nfs', nfs_udp: false
      vm.trigger.before :up do |uptrigger|
        uptrigger.run = {inline: "sh -c 'ssh-keygen -f ~/.ssh/known_hosts -R #{address}; ssh-keygen -f ~/.ssh/known_hosts -R #{name}; true'" }
      end

      vm.vm.provider :libvirt do |lv|
        lv.cpus = 4
        lv.memory = 6148
        lv.storage_pool_name = LVMPOOL
      end
      vm.vm.provision :shell, inline: FIXHOSTS
      vm.vm.provision :shell, inline: DELETEDHCP0DEFAULT
      vm.vm.provision :shell, inline: ROUTERASDEFAULT
      vm.vm.provision :shell, inline: "netplan apply"
      vm.vm.provision :shell, inline: EPICMGR

      vm.vm.provision :file, source: "../files/epic_hosts", destination: "epic_hosts"
      vm.vm.provision :shell, inline: "cat epic_hosts >> /etc/hosts"
      vm.vm.provision :file, source: "../files/resolved.conf", destination: "resolved.conf"
      vm.vm.provision :shell, inline: "mv resolved.conf /etc/systemd/resolved.conf"

      vm.vm.provision :file, source: "~/.ssh/id_rsa.pub", destination: "id_rsa.pub"
      vm.vm.provision :shell, inline: "cat id_rsa.pub >> .ssh/authorized_keys", privileged: false
    end
  end

  (1..3).each do |i|
    name = "mk8s#{i}"
    config.vm.define name do |vm|
      vm.vm.hostname = name
      vm.vm.network :public_network, auto_config: false,
                       dev: BRIDGE,
                       mode: :bridge,
                       type: :bridge,
                       trust_guest_rx_filters: true
      config.vm.synced_folder './', '/vagrant', type: 'nfs', nfs_udp: false
      vm.trigger.before :up do |uptrigger|
        uptrigger.run = {inline: "sh -c 'ssh-keygen -f ~/.ssh/known_hosts -R 192.168.254.10#{i}; ssh-keygen -f ~/.ssh/known_hosts -R #{name}; true'" }
      end

      vm.vm.provider :libvirt do |lv|
        lv.cpus = 2
        lv.memory = 4096
        lv.storage_pool_name = LVMPOOL
      end
      vm.vm.provision :shell, inline: FIXHOSTS
      vm.vm.provision :shell, inline: DELETEDHCP0DEFAULT
      # vm.vm.provision :shell, inline: ROUTERASDEFAULT
      vm.vm.provision :file, source: "../files/60-#{name}-netplan.yaml", destination: "60-acndev.yaml"
      vm.vm.provision :shell, inline: "mv 60-acndev.yaml /etc/netplan"
      vm.vm.provision :shell, inline: "netplan apply"
      vm.vm.provision :shell, inline: EPICMGR

      vm.vm.provision :file, source: "../files/mk8s_hosts", destination: "mk8s_hosts"
      vm.vm.provision :shell, inline: "cat mk8s_hosts >> /etc/hosts"

      vm.vm.provision :file, source: "../files/kubens", destination: "kubens"
      vm.vm.provision :shell, inline: "mv kubens /usr/local/bin"

      vm.vm.provision :file, source: "~/.ssh/id_rsa.pub", destination: "id_rsa.pub"
      vm.vm.provision :shell, inline: "cat id_rsa.pub >> .ssh/authorized_keys", privileged: false
    end
  end

  config.vm.define :adhoc do |vm|
    vm.vm.hostname = 'adhoc-client.localdomain'
    vm.vm.network :public_network, auto_config: false,
                  dev: BRIDGE,
                  mode: :bridge,
                  type: :bridge,
                  trust_guest_rx_filters: true,
                  ip: "192.168.254.110"
    vm.trigger.before :up do |uptrigger|
      uptrigger.run = {inline: "sh -c 'ssh-keygen -f ~/.ssh/known_hosts -R 192.168.254.110; ssh-keygen -f ~/.ssh/known_hosts -R #{vm.vm.hostname}; true'" }
    end

    vm.vm.provider :libvirt do |lv|
      lv.cpus = 2
      lv.memory = 4096
    end
    vm.vm.provision :shell, inline: FIXHOSTS
    vm.vm.provision :shell, inline: DELETEDHCP0DEFAULT
    # vm.vm.provision :shell, inline: ROUTERASDEFAULT
    vm.vm.provision :file, source: "../files/60-adhoc-netplan.yaml", destination: "60-acndev.yaml"
    vm.vm.provision :shell, inline: "mv 60-acndev.yaml /etc/netplan"
    vm.vm.provision :shell, inline: "netplan apply"

    vm.vm.provision :file, source: "../files/mk8s_hosts", destination: "mk8s_hosts"
    vm.vm.provision :shell, inline: "cat mk8s_hosts >> /etc/hosts"

    vm.vm.provision :file, source: "../files/kubens", destination: "kubens"
    vm.vm.provision :shell, inline: "mv kubens /usr/local/bin"

    vm.vm.provision :file, source: "~/.ssh/id_rsa.pub", destination: "id_rsa.pub"
    vm.vm.provision :shell, inline: "cat id_rsa.pub >> .ssh/authorized_keys", privileged: false
  end

end
